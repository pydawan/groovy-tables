group 'org.tools4j'
version '1.5'

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

repositories {
    mavenCentral()
}

sourceSets {
    main {
        groovy {
            srcDir 'src/generatedmain/groovy'
        }
    }
    test {
        groovy {
            srcDir 'src/generatedtest/groovy'
        }
    }
    codegenmain {
        groovy {
            srcDir 'src/codegenmain/groovy'
        }
    }
    codegentest {
        groovy {
            srcDir 'src/codegentest/groovy'
        }
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task genMain( type: JavaExec ) {
    main = 'org.tools4j.groovytables.OrDelegateGenerator'
    classpath = sourceSets.codegenmain.runtimeClasspath
}

task genTest( type: JavaExec ) {
    main = 'org.tools4j.groovytables.TestClassGenerator'
    classpath = sourceSets.codegentest.runtimeClasspath
}

clean.doFirst {
    delete "${rootDir}/src/generatedmain"
    delete "${rootDir}/src/generatedtest"
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:2.4.1"
    codegenmainCompile "org.codehaus.groovy:groovy-all:2.4.1"
    codegentestCompile "org.codehaus.groovy:groovy-all:2.4.1"
    codegentestCompile sourceSets.codegenmain.output

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"

    // dependencies for using Spock
    testCompile "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used
    testRuntime "cglib:cglib-nodep:3.1"          // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:2.1"    // allows mocking of classes without default constructor (together with CGLIB)
}

compileGroovy.dependsOn(genMain)
compileTestGroovy.dependsOn(genTest)

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    if(hasProperty('signing.keyId')) {
        sign configurations.archives
    } else {
        println 'singing.keyId property not found, therefore not signing.'
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            String username = hasProperty('ossrhUsername') ? ossrhUsername : System.getenv('ossrhUsername')
            String password = hasProperty('ossrhPassword') ? ossrhPassword : System.getenv('ossrhPassword')

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: username, password: password)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: username, password: password)
            }

            pom.project {
                name 'Groovy Tables'
                packaging 'jar'
                artifactId 'groovy-tables'
                description 'A groovy API which allows you to create lists of objects using a table like grammar.'
                url 'https://github.com/tools4j/groovy-tables'

                scm {
                    connection 'scm:git:git://github.com/tools4j/groovy-tables.git'
                    developerConnection 'scm:git:git@github.com:tools4j/groovy-tables.git'
                    url 'https://github.com/tools4j/groovy-tables'
                }

                licenses {
                    license {
                        name 'The MIT License'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id 'ben'
                        name 'Ben Warner'
                        email 'bjwarner@gmail.com'
                    }
                }
            }
        }
    }
}
